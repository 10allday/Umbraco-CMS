using Microsoft.AspNetCore.Antiforgery;
using Microsoft.AspNetCore.Mvc.Filters;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Umbraco.Core;
using Umbraco.Core.Configuration;

namespace Umbraco.Extensions
{

    /// <summary>
    /// A filter to set the csrf cookie token based on angular conventions
    /// </summary>
    public sealed class SetAngularAntiForgeryTokens : IAsyncActionFilter
    {
        private readonly IAntiforgery _antiforgery;
        private readonly IGlobalSettings _globalSettings;

        public SetAngularAntiForgeryTokens(IAntiforgery antiforgery, IGlobalSettings globalSettings)
        {
            _antiforgery = antiforgery;
            _globalSettings = globalSettings;
        }

        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            if (context.HttpContext.Response != null)
            {
                //DO not set the token cookies if the request has failed!!
                if (context.HttpContext.Response.StatusCode == (int)HttpStatusCode.OK)
                {
                    //don't need to set the cookie if they already exist and they are valid
                    if (context.HttpContext.Request.Cookies.TryGetValue(Constants.Web.AngularCookieName, out var angularCookieVal)
                        && context.HttpContext.Request.Cookies.TryGetValue(Constants.Web.CsrfValidationCookieName, out var csrfCookieVal))
                    {
                        //if they are not valid for some strange reason - we need to continue setting valid ones
                        if (await _antiforgery.IsRequestValidAsync(context.HttpContext))
                        {
                            await next();
                            return;
                        }
                    }

                    string cookieToken, headerToken;
                    _antiforgery.GetTokens(context.HttpContext, out cookieToken, out headerToken);

                    //We need to set 2 cookies: one is the cookie value that angular will use to set a header value on each request,
                    // the 2nd is the validation value generated by the anti-forgery helper that we use to validate the header token against.

                    context.HttpContext.Response.Cookies.Append(
                        Constants.Web.AngularCookieName, headerToken,
                        new Microsoft.AspNetCore.Http.CookieOptions
                        {
                            Path = "/",
                            //must be js readable
                            HttpOnly = false,
                            Secure = _globalSettings.UseHttps
                        });

                    context.HttpContext.Response.Cookies.Append(
                        Constants.Web.CsrfValidationCookieName, cookieToken,
                        new Microsoft.AspNetCore.Http.CookieOptions
                        {
                            Path = "/",
                            HttpOnly = true,
                            Secure = _globalSettings.UseHttps
                        });
                }
            }

            await next();
        }

    }
}
