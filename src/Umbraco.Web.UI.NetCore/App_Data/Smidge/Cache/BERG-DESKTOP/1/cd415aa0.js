(function(){'use strict';angular.module('umbraco.interceptors',[]).config(['$httpProvider',function($httpProvider){$httpProvider.defaults.xsrfHeaderName='X-UMB-XSRF-TOKEN';$httpProvider.defaults.xsrfCookieName='UMB-XSRF-TOKEN';$httpProvider.interceptors.push('securityInterceptor');$httpProvider.interceptors.push('requiredHeadersInterceptor');$httpProvider.interceptors.push('doNotPostDollarVariablesOnPostRequestInterceptor');$httpProvider.interceptors.push('cultureRequestInterceptor');}]);'use strict';(function(){'use strict';function cultureRequestInterceptor($injector){return{'request':function request(config){if(!Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath){return config;}
if(!config.url.match(RegExp(Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath+'/backoffice/','i'))){return config;}
var $routeParams=$injector.get('$routeParams');if($routeParams){config.headers['X-UMB-CULTURE']=$routeParams.cculture?$routeParams.cculture:$routeParams.mculture;config.headers['X-UMB-SEGMENT']=$routeParams.csegment?$routeParams.csegment:null;}
return config;}};}
angular.module('umbraco.interceptors').factory('cultureRequestInterceptor',cultureRequestInterceptor);}());'use strict';function _typeof(obj){if(typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj;};}
return _typeof(obj);}
(function(){'use strict';function removeProperty(obj,propertyPrefix){for(var property in obj){if(obj.hasOwnProperty(property)){if(property.startsWith(propertyPrefix)&&obj[property]!==undefined){obj[property]=undefined;}
if(_typeof(obj[property])==='object'){removeProperty(obj[property],propertyPrefix);}}}}
function transform(data){removeProperty(data,'$');}
function doNotPostDollarVariablesRequestInterceptor($q,urlHelper){return{'request':function request(config){if(config.method==='POST'){var clone=Utilities.copy(config);transform(clone.data);return clone;}
return config;}};}
angular.module('umbraco.interceptors').factory('doNotPostDollarVariablesOnPostRequestInterceptor',doNotPostDollarVariablesRequestInterceptor);}());'use strict';(function(){'use strict';function requestInterceptorFilter(){return['www.gravatar.com'];}
angular.module('umbraco.interceptors').value('requestInterceptorFilter',requestInterceptorFilter);}());'use strict';(function(){'use strict';function requiredHeadersInterceptor($q,urlHelper){return{'request':function request(config){config.headers['X-Requested-With']='XMLHttpRequest';var queryStrings=urlHelper.getQueryStringParams();if(queryStrings.umbDebug==='true'||queryStrings.umbdebug==='true'){config.headers['X-UMB-DEBUG']='true';}
return config;}};}
angular.module('umbraco.interceptors').factory('requiredHeadersInterceptor',requiredHeadersInterceptor);}());'use strict';(function(){'use strict';function securityInterceptor($q,$injector,requestRetryQueue,notificationsService,eventsService,requestInterceptorFilter){return{'response':function response(_response){var headers=_response.headers();if(headers['x-umb-user-seconds']){var userService=$injector.get('userService');userService.setUserTimeout(headers['x-umb-user-seconds']);}
if(headers['x-umb-user-modified']){eventsService.emit('app.userRefresh');}
return _response;},'responseError':function responseError(rejection){var config=rejection.config?rejection.config:{};var headers=config.headers?config.headers:{};if(headers['x-umb-ignore-error']==='ignore'||config.umbIgnoreErrors===true||Utilities.isArray(config.umbIgnoreStatus)&&config.umbIgnoreStatus.indexOf(rejection.status)!==-1){return $q.reject(rejection);}
if(config.url){var filtered=_.find(requestInterceptorFilter(),function(val){return config.url.indexOf(val)>0;});if(filtered){return $q.reject(rejection);}}
if(rejection.status===401){var umbRequestHelper=$injector.get('umbRequestHelper');var getCurrentUserPath=umbRequestHelper.getApiUrl('authenticationApiBaseUrl','GetCurrentUser');if(!rejection.config.url.endsWith(getCurrentUserPath)){var userService=$injector.get('userService');return userService.getCurrentUser().then(function(user){var userName=user?user.name:null;return requestRetryQueue.pushRetryFn('unauthorized-server',userName,function retryRequest(){return $injector.get('$http')(rejection.config);});});}}else if(rejection.status===404){var errMsg='The URL returned a 404 (not found): <br/><i>'+rejection.config.url.split('?')[0]+'</i>';if(rejection.data&&rejection.data.ExceptionMessage){errMsg+='<br/> with error: <br/><i>'+rejection.data.ExceptionMessage+'</i>';}
notificationsService.error('Request error',errMsg);}else if(rejection.status===403){var msg='Unauthorized access to URL: <br/><i>'+rejection.config.url.split('?')[0]+'</i><br/>Contact your administrator for information.';notificationsService.error('Authorization error',msg);}
return $q.reject(rejection);}};}
angular.module('umbraco.interceptors').factory('securityInterceptor',securityInterceptor);}());}());;